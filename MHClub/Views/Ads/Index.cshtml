@using MHClub.Domain.Models.Enums
@using MHClub.Models.Ads
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model MHClub.Models.Ads.AdsIndexDto

@{
    Layout = "_Layout";
    ViewBag.Title = "Главная";
    ViewBag.ColumnsCount = 4;
}

<div class="container-main">
    <div class="filter-card">
        <form id="filterForm">
            <h6>Цена</h6>
            <div class="d-flex gap-2 mb-3">
                <input type="text" name="MinPrice" placeholder="384" class="form-control">
                <input type="text" name="MaxPrice" placeholder="60255" class="form-control">
            </div>
            <h6>Высокий рейтинг</h6>
            <div class="form-check form-switch mb-3">
                <input type="checkbox" class="form-check-input" id="highRating" name="HighRating">
            </div>
            <h6>Состояние</h6>
            @foreach (ItemCondition condition in Enum.GetValues(typeof(ItemCondition)))
            {
                var conditionLabel = condition switch
                {
                    ItemCondition.New => "Новое",
                    ItemCondition.Used => "Б/у",
                    ItemCondition.NeedsRepair => "Требует ремонта",
                    _ => "Неизвестное"
                };

                <div class="form-check">
                    <input type="radio" class="form-check-input" id="@condition" name="Condition" value="@condition">
                    <label class="form-check-label" for="@condition">@conditionLabel</label>
                </div>
            }
            <h6>Тип</h6>
            @foreach (ItemType type in Enum.GetValues(typeof(ItemType)))
            {
                var typeLabel = type switch
                {
                    ItemType.Main => "Основное",
                    ItemType.Decomposed => "Декомпозированное",
                    _ => "Неизвестное"
                };

                <div class="form-check">
                    <input type="radio" class="form-check-input" id="@type" name="Type" value="@type">
                    <label class="form-check-label" for="@type">@typeLabel</label>
                </div>
            }
        </form>
    </div>
    <div class="ads-list">
        <div class="sort-select">
            <select id="sortBy" class="form-select">
                <option>Популярные</option>
                <option>По цене</option>
                <option>По рейтингу</option>
            </select>
        </div>
        <div class="filter-tags" id="filterTags">
            <!-- Filter tags will be dynamically added here -->
        </div>
        <div id="adsContainer">
            <!-- Ads content will be dynamically loaded here -->
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const filterForm = document.getElementById('filterForm');
            const filterTags = document.getElementById('filterTags');
            const sortBy = document.getElementById('sortBy');
            const adsContainer = document.getElementById('adsContainer');

            const updateAds = () => {
                const formData = new FormData(filterForm);
                formData.append('SortBy', sortBy.value);

                fetch('@Url.Action("AdsList")', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.text())
                    .then(html => {
                        adsContainer.innerHTML = html;
                        updateFilterTags(Object.fromEntries(formData.entries()));
                    })
                    .catch(error => console.error('Ошибка загрузки объявлений:', error));
            };

            const updateFilterTags = (filters) => {
                filterTags.innerHTML = '';
                Object.entries(filters).forEach(([key, value]) => {
                    if (key === 'Condition') {
                        value = {
                            New: 'Новое',
                            Used: 'Б/у',
                            NeedsRepair: 'Требует ремонта'
                        }[value] || value;
                    } else if (key === 'Type') {
                        value = {
                            Main: 'Основное',
                            Decomposed: 'Декомпозированное'
                        }[value] || value;
                    }

                    const tag = document.createElement('div');
                    tag.classList.add('filter-tag');
                    tag.textContent = `${key}: ${value}`;

                    const removeButton = document.createElement('button');
                    removeButton.textContent = '✖';
                    removeButton.addEventListener('click', () => {
                        if (key === 'HighRating') {
                            document.getElementById('highRating').checked = false;
                        } else if (key === 'Condition' || key === 'Type') {
                            const inputs = filterForm.querySelectorAll(`input[name='${key}']`);
                            inputs.forEach(input => input.checked = false);
                        } else {
                            filterForm.querySelector(`input[name='${key}']`).value = '';
                        }
                        updateAds();
                    });
                    tag.appendChild(removeButton);
                    filterTags.appendChild(tag);
                });
            };

            filterForm.addEventListener('input', updateAds);
            sortBy.addEventListener('change', updateAds);
            updateAds();
        });
    </script>
}
