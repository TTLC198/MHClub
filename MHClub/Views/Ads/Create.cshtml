@model MHClub.Models.Ads.AdsCreateViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Новое объявление";
}

@using (Html.BeginForm("Create", "Ads", FormMethod.Post, new
        {
            id = "formData",
            enctype = "multipart/form-data"
        }))
{
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="container mt-4">
        <div class="card shadow-sm p-4">
            <div class="d-flex align-items-center mb-3">
                <i class="bi-chevron-left fs-4 me-2" onclick="location.href='@ViewBag.ReturnUrl';"></i>
                <h4 class="mb-0">@ViewData["Title"]</h4>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        @Html.LabelFor(m => m.Name, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(m => m.Name, new
                        {
                            @class = "form-control bg-light",
                            placeholder = "Введите название объявления",
                            style = "border: none; background-color: #EAEAEA;"
                        })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.CategoryId, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.CategoryId, Model.CategoriesSelect ?? [],
                            "-- Выберите категорию --", new { @class = "form-select bg-light", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.ConditionId, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.ConditionId, (List<SelectListItem>)ViewBag.Conditions ?? [],
                            "-- Выберите состояние --", new { @class = "form-select bg-light", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.ConditionId, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.ManufactureCountry, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.ManufactureCountry, Model.CountriesSelect ?? [],
                            "-- Выберите страну-производитель --", new { @class = "form-select bg-light", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.ManufactureCountry, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Quantity, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.Quantity, Enumerable.Range(0, 20)
                                .Select(i => new SelectListItem($"{i} шт.", i.ToString())).ToList(),
                            "-- Выберите количество --", new { @class = "form-select bg-light input-field", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Description, new { @class = "form-label fw-bold" })
                        @Html.TextAreaFor(m => m.Description, new
                        {
                            @class = "form-control bg-light",
                            placeholder = "Введите описание",
                            style = "border: none; background-color: #EAEAEA;"
                        })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Загрузите фото</label>
                        <input type="file" id="imageUpload" data-count="0" name="Images" multiple class="form-control bg-light" accept="image/*" style="border: none; background-color: #EAEAEA;">
                        <div id="imagePreview" class="mt-2 d-flex flex-wrap"></div>
                    </div>

                    <h5 class="mt-4">Информация о доставке</h5>
                    <hr>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.StartCountry, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.StartCountry, Model.CountriesSelect ?? [],
                            "-- Выберите страну отправления --", new { @class = "form-select bg-light input-field", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.StartCountry, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.CountryOfIntermediateArrival, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.CountryOfIntermediateArrival, Model.CountriesSelect ?? [],
                            "-- Выберите страну промежуточного пребывания --", new { @class = "form-select bg-light input-field", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.CountryOfIntermediateArrival, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.CountryOfDelivery, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.CountryOfDelivery, Model.CountriesSelect?.Where(x => x.Value == "Россия") ?? [],
                            "-- Выберите страну доставки --", new { @class = "form-select bg-light input-field", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.CountryOfDelivery, "", new { @class = "text-danger" })
                    </div>

                    <h5 class="mt-4">Калькулятор полной стоимости</h5>
                    <hr>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Cost, new { @class = "form-label fw-bold" })
                        <div class="input-container position-relative">
                            @Html.TextBoxFor(m => m.Cost, null, new
                            {
                                @class = "form-control bg-light w-100 input-field",
                                style = "border: none; background-color: #EAEAEA;",
                                placeholder = "Введите стоимость товара в рублях",
                                type = "text"
                            })
                            <i class="bi bi-weight position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                        </div>
                        @Html.ValidationMessageFor(m => m.Cost, "", new { @class = "text-danger" })
                    </div>

                    <h5 class="mt-4">Габариты посылки</h5>
                    <hr>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.Length, new { @class = "form-label fw-bold" })
                            @Html.TextBoxFor(m => m.Length, new
                            {
                                @class = "form-control bg-light dimension-input",
                                placeholder = "Длина",
                                style = "border: none; background-color: #EAEAEA;"
                            })
                            @Html.ValidationMessageFor(m => m.Length, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.Width, new { @class = "form-label fw-bold" })
                            @Html.TextBoxFor(m => m.Width, new
                            {
                                @class = "form-control bg-light dimension-input",
                                placeholder = "Ширина",
                                style = "border: none; background-color: #EAEAEA;"
                            })
                            @Html.ValidationMessageFor(m => m.Width, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.Height, new { @class = "form-label fw-bold" })
                            @Html.TextBoxFor(m => m.Height, new
                            {
                                @class = "form-control bg-light dimension-input",
                                placeholder = "Высота",
                                style = "border: none; background-color: #EAEAEA;"
                            })
                            @Html.ValidationMessageFor(m => m.Height, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Объем (см³)</label>
                        @Html.TextBoxFor(m => m.Volume, new
                        {
                            id = "volume",
                            @class = "form-control bg-light input-field",
                            placeholder = "Введите значения в поля выше",
                            style = "border: none; background-color: #EAEAEA;",
                            @readonly = "readonly"
                        })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.Weight, new { @class = "form-label fw-bold" })
                        <div class="input-container position-relative">
                            @Html.TextBoxFor(m => m.Weight, null, new
                            {
                                @class = "form-control bg-light w-100 input-field",
                                style = "border: none; background-color: #EAEAEA;",
                                placeholder = "Введите вес в граммах",
                                type = "text"
                            })
                            <i class="bi bi-weight position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                        </div>
                        @Html.ValidationMessageFor(m => m.Weight, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.SellerMargin, new { @class = "form-label fw-bold" })
                        <div class="input-container position-relative">
                            @Html.TextBoxFor(m => m.SellerMargin, null, new
                            {
                                @class = "form-control bg-light w-100 input-field",
                                style = "border: none; background-color: #EAEAEA;",
                                placeholder = "Введите наценку от продавца (в процентах)",
                                type = "text"
                            })
                            <i class="bi bi-percent position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                        </div>
                        @Html.ValidationMessageFor(m => m.SellerMargin, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        <div class="d-flex align-items-center">
                            @Html.LabelFor(m => m.OurService, new { @class = "form-label fw-bold me-2" })
                            <div class="form-check">
                                @Html.CheckBoxFor(m => m.OurService, new
                                {
                                    @class = "form-check-input input-field"
                                })
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.OurService, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.BankCommission, new { @class = "form-label fw-bold" })
                        <div class="input-container position-relative">
                            @Html.TextBoxFor(m => m.BankCommission, new
                            {
                                @class = "form-control bg-light w-100 input-field",
                                style = "border: none; background-color: #EAEAEA;",
                                placeholder = "Введите комиссию банка",
                                type = "text"
                            })
                            <i class="bi bi-bank position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                        </div>
                        @Html.ValidationMessageFor(m => m.BankCommission, "", new { @class = "text-danger" })
                    </div>

                    <div class="custom-delivery-cost">
                        <div class="mb-3">
                            @Html.LabelFor(m => m.CostOfDelivery, new { @class = "form-label fw-bold" })
                            <div class="input-container position-relative">
                                @Html.TextBoxFor(m => m.CostOfDelivery, null, new
                                {
                                    @class = "form-control bg-light w-100 input-field",
                                    style = "border: none; background-color: #EAEAEA;",
                                    placeholder = "Введите приблизительную стоимость доставки",
                                    type = "text"
                                })
                                <i class="bi bi-weight position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                            </div>
                            @Html.ValidationMessageFor(m => m.CostOfDelivery, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.CustomsDuty1, new { @class = "form-label fw-bold" })
                            <div class="input-container position-relative">
                                @Html.TextBoxFor(m => m.CustomsDuty1, null, new
                                {
                                    @class = "form-control bg-light w-100 input-field",
                                    style = "border: none; background-color: #EAEAEA;",
                                    placeholder = "Введите таможенный сбор",
                                    type = "text"
                                })
                                <i class="bi bi-weight position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                            </div>
                            @Html.ValidationMessageFor(m => m.CustomsDuty1, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.CustomsDuty2, new { @class = "form-label fw-bold" })
                            <div class="input-container position-relative">
                                @Html.TextBoxFor(m => m.CustomsDuty2, null, new
                                {
                                    @class = "form-control bg-light w-100 input-field",
                                    style = "border: none; background-color: #EAEAEA;",
                                    placeholder = "Введите таможенный сбор",
                                    type = "text"
                                })
                                <i class="bi bi-weight position-absolute top-50 end-0 translate-middle-y text-muted me-2"></i>
                            </div>
                            @Html.ValidationMessageFor(m => m.CustomsDuty2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3 tariff-select display-none">
                        @Html.LabelFor(m => m.TariffId, new { @class = "form-label fw-bold" })
                        @Html.DropDownListFor(m => m.TariffId, (List<SelectListItem>)ViewBag.Tariffs ?? [],
                            "-- Выберите тариф --", new { @class = "form-select bg-light input-field", style = "border: none; background-color: #EAEAEA;" })
                        @Html.ValidationMessageFor(m => m.TariffId, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.TotalCost, new { @class = "form-label fw-bold" })
                        <div class="input-container position-relative">
                            @Html.TextBoxFor(m => m.TotalCost, new
                            {
                                @class = "form-control bg-light w-100",
                                style = "border: none; background-color: #EAEAEA;",
                                placeholder = "Итоговая стоимость",
                                @readonly = "readonly",
                                type = "text"
                            })
                        </div>
                        @Html.ValidationMessageFor(m => m.TotalCost, "", new { @class = "text-danger" })
                    </div>

                    <button id="submit" class="btn text-white w-100"
                            style="background-color: #FFB8D2;">
                        Разместить
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {

    <script>
        function upload(fileUploadInput) {
            const image = fileUploadInput.files[0];
            if (!image.type.includes('image')) {
                return alert('Only images are allowed!');
            }

            if (image.size > 10_000_000) {
                return alert('Maximum upload size is 10MB!');
            }

            const fileReader = new FileReader();
            fileReader.readAsDataURL(image);

            fileReader.onload = (fileReaderEvent) => {
                const picture = fileUploadInput.parentElement.querySelector('.image-upload');
                picture.src = `${fileReaderEvent.target.result}`;
            }
        }

        $(document).ready(function () {
            calculateVolume();
            showOurService();
            
            $("#OurService").on('change', function postinput(event){
                showOurService();
            });
    
            $(".input-field").on('change', function postinput(){
                var formData = $('#formData').serialize(); // this.value
                console.log(formData);
                $.ajax({
                    url: '@Url.Action("CalculatePrice")',
                    data: formData,
                    type: 'post'
                }).done(function(responseData) {
                    $('#TotalCost').val(responseData.replace(/[.]/g, ","));
                }).fail(function() {
                    console.log('Failed');
                });
            });
        
            $("#removeImageButton").hide();
        $("#addImageButton").click(function () {
            $.ajax({
                url: '@Url.Action("GetUploadForm", "Media")',
                type: 'GET',
                cache: false,
                async: true,
                dataType: "html"
            })
                .done(function(result) {
                    $('.images').append(result);
                    $("#removeImageButton").show();
                }).fail(function(xhr) {
                console.log('error : ' + xhr.status + ' - ' + xhr.statusText + ' - ' + xhr.responseText);
            });
        });

        $("#removeImageButton").click(function () {
            if ($('.images').children().length == 1) {
                $("#removeImageButton").hide();
                return false;
            }

            $(".images").children().eq($('.images').children().length).remove();
        });
    });
    
        function previewImage(input) {
            const file = input.files[0];
            const reader = new FileReader();
            const imgElement = document.getElementById("profile-image");
            const plusIcon = document.getElementById("plus-icon");

            reader.onload = function (e) {
                imgElement.src = e.target.result;
                imgElement.classList.remove("d-none");
                plusIcon.classList.add("d-none");
            };

            if (file) {
                reader.readAsDataURL(file);
            }
        }

        document.getElementById('imageUpload').addEventListener('change', function(event) {
            const previewContainer = document.getElementById('imagePreview');
            //previewContainer.innerHTML = '';
            Array.from(event.target.files).forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    console.log(event.target.dataset.count);
                    const imgWrapper = document.createElement('div');
                    imgWrapper.id = `image-input-${event.target.dataset.count}`;
                    imgWrapper.className = 'position-relative m-1';
                    imgWrapper.innerHTML = `<img src="${e.target.result}" class="img-thumbnail" style="width: 100px; height: 100px; object-fit: cover;">
                <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0" onclick="removeImage(${event.target.dataset.count})">&times;</button>`;
                    previewContainer.appendChild(imgWrapper);
                    event.target.dataset.count++;
                };
                reader.readAsDataURL(file);
            });
        });

        function removeImage(index) {
            const imageInput = document.getElementById(`image-input-${index}`);
            imageInput.remove();
        }

        function calculateVolume() {
            let length = parseFloat(document.querySelector("[name='Length']").value) || 0;
            let width = parseFloat(document.querySelector("[name='Width']").value) || 0;
            let height = parseFloat(document.querySelector("[name='Height']").value) || 0;
            let volume = length * width * height;
            document.getElementById("volume").value = volume.toString().replace(/[.]/g, ",");
        }
        
        function showOurService() {
            if ( $("#OurService").prop('checked') === true) {
                $('.tariff-select').addClass('display-none');
                $('.custom-delivery-cost').removeClass('display-none');
            }
            else if ($("#OurService").prop('checked') === false){
                $('.custom-delivery-cost').addClass('display-none');
                $('.tariff-select').removeClass('display-none');
            }
        }

        document.querySelectorAll(".dimension-input").forEach(input => {
            input.addEventListener("input", calculateVolume);
        
        });
    </script>

}