@using MHClub.Utils
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@model MHClub.Models.User.UserEditDto

@{
    Layout = "_Layout";
    ViewData["Title"] = "Редактирование профиля";
}

<div class="d-flex gap-2 justify-content-center">
    <div style="background-color: #FCC1E1;" class="d-flex flex-column w-50 p-4 rounded shadow">
        @using (Html.BeginForm("Edit", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="d-flex justify-content-center mb-3">
                <label class="custom-file-upload position-relative">
                    @Html.TextBoxFor(m => m.Avatar, "", new
                    {
                        type = "file",
                        onchange = "upload(this)",
                        style = "display:none",
                        accept = "image/*"
                    })
                    <div id="img_container">
                        <div class="ratio ratio-1x1 rounded-circle overflow-hidden shadow" style="width: 150px; height: 150px;">
                            <img id="profile-image" src="@Url.Action("Get", "Media", new { path = Model?.ImageUrl?.GetLocalPath() })" class="card-img-top img-cover" alt="avatar">
                        </div>
                    </div>
                </label>
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-person"></i>
                    </span>
                    @Html.TextBoxFor(m => m.Name, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Введите имя",
                        type = "text"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-envelope"></i>
                    </span>
                    @Html.TextBoxFor(m => m.Email, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Введите почту",
                        type = "email"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-phone"></i>
                    </span>
                    @Html.TextBoxFor(m => m.Phone, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Введите телефон",
                        type = "text"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-lock"></i>
                    </span>
                    @Html.TextBoxFor(m => m.OldPassword, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Введите старый пароль",
                        type = "password"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.OldPassword, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-lock"></i>
                    </span>
                    @Html.TextBoxFor(m => m.Password, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Введите новый пароль",
                        type = "password"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 position-relative">
                <div class="input-group">
                    <span class="input-group-text bg-light border-0">
                        <i class="bi bi-lock"></i>
                    </span>
                    @Html.TextBoxFor(m => m.RepeatPassword, new
                    {
                        @class = "form-control bg-light",
                        style = "border: none; background-color: #EAEAEA;",
                        placeholder = "Повторите пароль",
                        type = "password"
                    })
                </div>
                @Html.ValidationMessageFor(m => m.RepeatPassword, "", new { @class = "text-danger" })
            </div>

            <div class="d-flex flex-column gap-2">
                <button class="btn text-white w-100" style="background-color: #EB275F;">Сохранить изменения</button>
                <button type="button" onclick="location.href=`@ViewBag.ReturnUrl`" class="btn text-white w-100" style="background-color: #72C4E7;">Выйти без изменений</button>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function upload(fileUploadInput) {
            const image = fileUploadInput.files[0];
            if (!image.type.includes('image')) {
                return alert('Only images are allowed!');
            }

            if (image.size > 10_000_000) {
                return alert('Maximum upload size is 10MB!');
            }

            const fileReader = new FileReader();
            fileReader.readAsDataURL(image);

            fileReader.onload = (fileReaderEvent) => {
                document.querySelector('#profile-image').src = fileReaderEvent.target.result;
            };
        }
    </script>
}